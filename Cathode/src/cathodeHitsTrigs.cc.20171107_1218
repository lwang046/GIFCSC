#include <iostream>
#include "GifCSC/Cathode/interface/cathodeHitsTrigs.h"

//#include "FWCore/Framework/interface/Frameworkfwd.h"
//#include <FWCore/Framework/interface/ESHandle.h>

cathodeHitsTrigs::cathodeHitsTrigs(short unsigned chamber, const edm::ParameterSet& iConfig, short unsigned debuglevel)
					 : chamberType(chamber), commonCurrentEvtN(-1), evtsProccededCLCTs(0),
					   debug(debuglevel){
	edm::InputTag clctDigiTag  = iConfig.getParameter<edm::InputTag>("alctDigiTag");
	std::cout << clctDigiTag << std::endl;
	std::cout << "here1: " << clct_token.isUninitialized() << "\t" << clct_token.index() << std::endl;
	clct_token = consumes<CSCCLCTDigiCollection>(clctDigiTag);
	std::cout << "here2: " << clct_token.isUninitialized() << "\t" << clct_token.index() << std::endl;
}


cathodeHitsTrigs::~cathodeHitsTrigs(){

}

bool cathodeHitsTrigs::bookCathodeHistos(){
	bool ok = false;
	return ok;
}
bool cathodeHitsTrigs::writeCathodeHistos(){
	bool ok = false;
	return ok;
}
bool cathodeHitsTrigs::cleanCathodeHistos(){
	bool ok = false;
	return ok;
}

bool cathodeHitsTrigs::clctInEvent(const edm::Event& iEvent){
//http://cmsdoxygen.web.cern.ch/cmsdoxygen/CMSSW_7_5_1/doc/html/d5/d6e/CSCCLCTDigiCollection_8h_source.html
//typedef MuonDigiCollection<CSCDetId, CSCCLCTDigi> CSCCLCTDigiCollection;
//http://cmsdoxygen.web.cern.ch/cmsdoxygen/CMSSW_7_5_1/doc/html/da/d26/classCSCCLCTDigi.html
	bool ok = false;
	edm::Handle<CSCCLCTDigiCollection> clct;
	iEvent.getByToken(clct_token, clct);

	for (CSCCLCTDigiCollection::DigiRangeIterator clctit=clct->begin(); clctit!=clct->end(); ++clctit) {
		CSCDetId id = (CSCDetId)(*clctit).first;
		if(id.chamber()!=chamberType) continue;
		if(debug) std::cout   <<  "CLCT from : chamber " << id.chamber()
							  << " station " << id.station()
							  << " ring    " << id.ring()
							  << " layer   " << id.layer() << std::endl;
		std::vector<CSCCLCTDigi>::const_iterator digiItr = (*clctit).second.first;
		std::vector<CSCCLCTDigi>::const_iterator last    = (*clctit).second.second;
		for( ; digiItr != last; ++digiItr) {
			if(debug) digiItr->print();
		}; // end loop on CSCCLCTDigi

	}; // end loop CSCCLCTDigiCollection

	return ok;
};

